@page "/"
@inject HttpClient Http
@inject IStringLocalizer<Index> Localization
@inject IStringLocalizer<LanguageSelector> LocalizationLangauge
@inject IJSRuntime JSRuntime


<PageTitle>RoK Academy - @Localization["PageTitle"]</PageTitle>

<div class="mb-3">
    <div class="input-group">
        <div class="form-floating">
            <input id="questionInput"
                   class="form-control text-bg-light border-light"
                   type="text"
                   placeholder="@Localization["QuestionInputAriaLabel"]"
                   aria-label="@Localization["QuestionInputAriaLabel"]"
                   disabled="@loadingAnswer"
                   value="@input"
                   @onchange="@OnChange_SearchByInput"
                   @oninput="@OnInput_SaveInputData"
                   @onkeypress="OnKeyPress_SearchByInput">

            <label for="questionInput" class="text-dark d-none d-sm-block fs-6">
                @(queryMode is 0
                    ? Localization["InputPlaceholderQuestionsText"]
                    : Localization["InputPlaceholderAnswersText"])
            </label>
            <label for="questionInput" class="text-dark d-block d-sm-none">
                <span><i class="fa-solid fa-magnifying-glass"></i></span>
            </label>
        </div>

        <button class="input-group-text text-bg-light text-dark @(string.IsNullOrWhiteSpace(input) ? "pe-none" : "pe-auto")"
                data-bs-toggle="tooltip"
                data-bs-placement="top"
                data-bs-custom-class="custom-tooltip"
                data-bs-title="@Localization["ClearSearchInputText"]"
                @onclick="ClearInput">
            <i class="fa-solid fa-xmark"></i>
        </button>

        <button id="searchHistoryDropdownmenu"
                class="btn @(!searchHistory.Any() ? "btn-outline-light" : "btn-light") dropdown-toggle"
                disabled="@(!searchHistory.Any())"
                type="button" data-bs-toggle="dropdown"
                aria-expanded="false">
            <span class="d-inline d-sm-none"><i class="fa-solid fa-clock-rotate-left"></i></span>
            <span class="d-none d-sm-inline">@Localization["SearchHistoryDropdownButtonText"]</span>
        </button>

        <ul class="dropdown-menu dropdown-menu-end dropdown-menu-dark" aria-labelledby="searchHistoryDropdownmenu">
            <li><h6 class="dropdown-header">@Localization["SearchHistoryDropdownHeaderText"]</h6></li>
            @if (searchHistory is not null)
            {
                @foreach (string search in searchHistory)
                {
                    <li><a class="dropdown-item" href="" @onclick="() => OnClick_SearchByHistory(search)">@search</a></li>
                }
            }
        </ul>
    </div>
    <div class="d-flex align-items-center">
        <div id="questionHelp" class="form-text text-start flex-fill d-none d-sm-block">@Localization["InputHelpText"]</div>
        <div class="form-check form-switch ms-auto">
            <input class="form-check-input"
                   type="checkbox"
                   role="switch"
                   id="querySearchSwitcher"
                   disabled="@enteredQueryModeChange"
                   checked="@(queryMode is 0 ? false : true)"
                   value="@(queryMode)"
                   @onchange="OnChange_SwitchQueryModeAsync">
        </div>
        <span data-bs-toggle="tooltip"
              data-bs-placement="top"
              data-bs-custom-class="custom-tooltip"
              data-bs-title="@Localization["QuerySwitchHelpText"]">
            <i class="fa-regular fa-circle-question"></i>
        </span>
    </div>
</div>

<div class="table-responsive table-responsive-md my-5">
    @if (answers is null || questionsWithAnswers is null)
    {
        <LoadingIndicator Indicator="Indicator.Enhanced" />
    }
    else
    {
        @if (loadingAnswer)
        {
            <LoadingIndicator Indicator="Indicator.Enhanced" />
        }
        else
        {
            @if (answers.Any())
            {
                <table class="table table-lg table-dark table-hover table-striped align-middle">
                    <thead>
                        <tr>
                            <th scope="col" class="text-start d-none d-sm-block">@Localization["TableHeaderQuestionText"]</th>
                            <th scope="col" class="text-start text-sm-end">@Localization["TableHeaderAnswerText"]</th>
                        </tr>
                    </thead>
                    <tbody class="table-group-divider">
                        @foreach (var answer in answers)
                        {
                            <tr>
                                <td class="text-start d-none d-sm-block">@answer.Key</td>
                                <td class="text-start text-sm-end">
                                    @if (answer.Value.Length is 1)
                                    {
                                        <span class="d-block">@answer.Value.FirstOrDefault()</span>
                                    }
                                    else
                                    {
                                        @foreach (string a in answer.Value)
                                        {
                                            @if (!a.Equals(answer.Value.Last()))
                                            {
                                                <span class="d-block">@(a) @Localization["MultilpleAnswersSeparatorText"]</span>
                                            }
                                            else
                                            {
                                                <span class="d-block">@(a)</span>
                                            }
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                @if (enteredSearchMode)
                {
                    <p>@Localization["NoDataFoundText"]</p>
                }
            }
        }
    }
</div>

@code {
    private Task<IJSObjectReference>? _settingsModule;
    private Dictionary<string, string[]> emptyDictionary = new();
    private IReadOnlyDictionary<string, string[]>? questionsWithAnswers;
    private IReadOnlyDictionary<string, string[]>? answers;
    private QueryMode queryMode;
    private Stack<string> searchHistory = new(10);
    private bool loadingAnswer = false;
    private bool enteredSearchMode = false;
    private bool enteredQueryModeChange = false;
    private string input = string.Empty;

    public Task<IJSObjectReference> SettingsModule =>
        _settingsModule ??= JSRuntime.InjectJsObjectReference("import", "./js/settings.js");

    protected override async Task OnInitializedAsync()
    {
        if (SettingsModule is not null)
        {
            IJSObjectReference settings = await SettingsModule;

            string rawMode = await settings.InvokeAsync<string>("getSearchQueryMode");

            if (!string.IsNullOrWhiteSpace(rawMode))
            {
                queryMode = (QueryMode)Convert.ToInt32(rawMode);
            }
        }

        answers = emptyDictionary;
        await InitializeDataAsync();

        await base.OnInitializedAsync();
    }

    private async Task InitializeDataAsync()
    {
        string localizationFileUrl = $"data/{LocalizationLangauge["Locale"]}.json";

        try
        {
            Dictionary<string, string[]>? tempDict = await Http.GetFromJsonAsync<Dictionary<string, string[]>>(localizationFileUrl);

            questionsWithAnswers = tempDict;
        }
        catch (Exception)
        {
            questionsWithAnswers = emptyDictionary;
        }
    }

    private void OnInput_SaveInputData(ChangeEventArgs e)
    {
        input = $"{e.Value}";
        enteredSearchMode = false;
    }

    private void ClearInput()
    {
        input = string.Empty;
        answers = emptyDictionary;
        enteredSearchMode = false;
    }

    private async Task OnChange_SwitchQueryModeAsync(ChangeEventArgs e)
    {
        enteredQueryModeChange = true;
        try
        {
            switch (e.Value)
            {
                case false:
                    queryMode = QueryMode.QuestionMode;
                    break;
                case true:
                    queryMode = QueryMode.AnswerMode;
                    break;
            }

            if (SettingsModule is not null)
            {
                IJSObjectReference settings = await SettingsModule;

                await settings.InvokeVoidAsync("setSearchQueryMode", queryMode);
            }
        }
        finally
        {
            enteredQueryModeChange = false;
            StateHasChanged();
        }
    }

    private void OnKeyPress_SearchByInput(KeyboardEventArgs e)
    {
        if (!e.Key.Equals("Enter"))
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(input))
        {
            return;
        }

        enteredSearchMode = true;
        loadingAnswer = true;
        _ = Task.Run(async () =>
        {
            await LookupAnswersAsync(input);
        });
    }

    private void OnChange_SearchByInput(ChangeEventArgs e)
    {
        enteredSearchMode = true;
        loadingAnswer = true;
        _ = Task.Run(async () =>
        {
            string searchInput = e.Value is null ? string.Empty : $"{e.Value}";
            await LookupAnswersAsync(searchInput);
        });
    }

    private void OnClick_SearchByHistory(string searchHistory)
    {
        enteredSearchMode = true;
        loadingAnswer = true;
        _ = Task.Run(async () =>
        {
            input = searchHistory;
            await LookupAnswersAsync(searchHistory);
        });
    }

    private async Task LookupAnswersAsync(string searchInput)
    {
        try
        {
            if (questionsWithAnswers is null)
            {
                answers = emptyDictionary;
                return;
            }

            if (string.IsNullOrEmpty(searchInput) || string.IsNullOrWhiteSpace(searchInput))
            {
                answers = emptyDictionary;
                return;
            }

            if (!searchHistory.Contains(searchInput))
            {
                searchHistory.Push(searchInput);
            }

            if (queryMode is 0)
            {
                answers =
                    (from q in questionsWithAnswers
                     where q.Key.Contains(searchInput, StringComparison.OrdinalIgnoreCase)
                     select q).ToDictionary(q => q.Key, q => q.Value);

                return;
            }

            answers =
                    questionsWithAnswers
                    .Where(a => a.Value.Any(x => x.Contains(searchInput, StringComparison.OrdinalIgnoreCase)))
                    .Select(q => q)
                    .ToDictionary(q => q.Key, q => q.Value);
        }
        finally
        {
            await InvokeAsync(() =>
            {
                loadingAnswer = false;
                StateHasChanged();
            });
        }
    }

    protected enum QueryMode
    {
        QuestionMode = 0,
        AnswerMode = 1
    }
}