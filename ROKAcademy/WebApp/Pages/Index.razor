@page "/"
@inject HttpClient Http
@inject IStringLocalizer<Index> Localization

<PageTitle>RoK Academy - @Localization["PageTitle"]</PageTitle>

<div class="form-floating mb-3">
    <input id="questionInput"
           class="form-control form-control-lg"
           type="text"
           aria-label="@Localization["QuestionInputAriaLabel"]"
           disabled="@loadingAnswer"
           @onchange="@FindQuestionOrAnswerAsync">

    <label for="questionInput" class="text-muted">@Localization["InputPlaceholderText"]</label>
    <div id="questionHelp" class="form-text text-start">@Localization["InputHelpText"]</div>
</div>

<div class="table-responsive table-responsive-md my-3">
    @if (loadingAnswer)
    {
        <div class="spinner-border text-light" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {

        <table class="table table-lg table-dark table-hover table-striped align-middle">
            <thead>
                <tr>
                    @if (answers is not null)
                    {
                        if (answers.Count() is 0)
                        {
                            <th scope="col">@Localization["TableHeaderQuestionText"]</th>
                        }
                    }
                    <th scope="col">@Localization["TableHeaderAnswerText"]</th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
                @if (questionsWithAnswers is null)
                {
                    <tr>
                        <th>
                            @Localization["LoadingText"]
                        </th>
                        <th>
                            <div class="spinner-border text-light" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </th>
                    </tr>
                }
                else
                {
                    @if (answers is null)
                    {
                        <tr>
                            <th>@Localization["NoDataFoundText"]</th>
                        </tr>
                    }
                    else
                    {
                        @if (answers.Count() is 0)
                        {
                            @for (int i = 0; i < questionsWithAnswers.Count; i++)
                            {
                                <tr>
                                    <td>@questionsWithAnswers.ElementAt(i).Key</td>
                                    <td>@questionsWithAnswers.ElementAt(i).Value</td>
                                </tr>
                            }
                        }
                        else
                        {
                            @for (int i = 0; i < answers.Count(); i++)
                            {
                                <tr>
                                    <td>@answers.ElementAt(i)</td>
                                </tr>
                            }
                        }
                    }
                }
            </tbody>
        </table>
    }
</div>


@code {
    private IReadOnlyDictionary<string, string>? questionsWithAnswers;
    private IEnumerable<string>? answers = Enumerable.Empty<string>();
    private bool loadingAnswer = false;

    protected override async Task OnInitializedAsync()
    {
        await InitializeDataAsync();

        await base.OnInitializedAsync();
    }

    private async Task InitializeDataAsync()
    {
        Dictionary<string, string>? tempDict = await Http.GetFromJsonAsync<Dictionary<string, string>>("data/questions.json");

        questionsWithAnswers = tempDict;
    }

    private async Task FindQuestionOrAnswerAsync(ChangeEventArgs e)
    {
        if (questionsWithAnswers is null)
        {
            answers = Enumerable.Empty<string>();
            return;
        }

        if (string.IsNullOrEmpty($"{e.Value}") || string.IsNullOrWhiteSpace($"{e.Value}"))
        {
            answers = Enumerable.Empty<string>();
            return;
        }

        loadingAnswer = true;
        _ = Task.Run(async () =>
        {
            answers = questionsWithAnswers.Where(q => q.Key.Contains($"{e.Value}", StringComparison.OrdinalIgnoreCase)).Select(a => a.Value);

            await InvokeAsync(() =>
            {
                loadingAnswer = false;
                StateHasChanged();
            });
        });

        await Task.CompletedTask;
    }
}

