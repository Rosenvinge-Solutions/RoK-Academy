@page "/"
@inherits LayoutBase
@inject HttpClient Http
@inject IStringLocalizer<Index> Localization
@inject IStringLocalizer<LanguageSelector> LocalizationLangauge

<PageTitle>RoK Academy - @Localization["PageTitle"]</PageTitle>

<div class="mb-3">
    @if (isDataSupportedByLanguage is false)
    {
        <div class="alert alert-warning d-flex align-items-center alert-dismissible fade show" role="alert">
            <svg class="bi flex-shrink-0 me-2" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"></use></svg>
            <div>
                @Localization["DataNotSupported"]
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <div class="input-group">
        <div class="form-floating">
            <input id="questionInput"
                   class="form-control text-bg-light border-light"
                   type="text"
                   placeholder="@Localization["QuestionInputAriaLabel"]"
                   aria-label="@Localization["QuestionInputAriaLabel"]"
                   disabled="@loadingAnswer"
                   value="@input"
                   @ref="@inputReference"
                   @onchange="@OnChange_SearchByInput"
                   @oninput="@OnInput_SaveInputData"
                   @onkeypress="OnKeyPress_HandleInput"
                   @onkeydown="OnKeyDown_HandleInput">

            <label for="questionInput" class="text-dark d-none d-sm-block fs-6">
                @(queryMode is 0
                    ? Localization["InputPlaceholderQuestionsText"]
                    : Localization["InputPlaceholderAnswersText"])
            </label>
            <label for="questionInput" class="text-dark d-block d-sm-none">
                <span><i class="fa-solid fa-magnifying-glass"></i></span>
            </label>
        </div>

        <button class="input-group-text text-bg-light text-dark @(string.IsNullOrWhiteSpace(input) ? "pe-none" : "pe-auto")"
                data-bs-toggle="tooltip"
                data-bs-placement="top"
                data-bs-custom-class="custom-tooltip"
                data-bs-title="@Localization["ClearSearchInputText"]"
                @onclick="ClearInput">
            <i class="fa-solid fa-xmark"></i>
        </button>

        <button id="searchHistoryDropdownmenu"
                class="btn @(!searchHistory.Any() ? "btn-outline-light" : "btn-light") dropdown-toggle"
                disabled="@(!searchHistory.Any())"
                type="button" data-bs-toggle="dropdown"
                aria-expanded="false">
            <span class="d-inline d-sm-none"><i class="fa-solid fa-clock-rotate-left"></i></span>
            <span class="d-none d-sm-inline">@Localization["SearchHistoryDropdownButtonText"]</span>
        </button>

        <ul class="dropdown-menu dropdown-menu-end dropdown-menu-dark scrollable-dropdown-menu" aria-labelledby="searchHistoryDropdownmenu">
            <li><h6 class="dropdown-header">@Localization["SearchHistoryDropdownHeaderText"]</h6></li>
            @if (searchHistory is not null)
            {
                @foreach (string search in searchHistory.Reverse())
                {
                    <li><a class="dropdown-item" href="" @onclick="() => OnClick_SearchByHistory(search)">@search</a></li>
                }
            }
            <li>
                <div class="d-block text-center my-2">
                    <button class="btn btn-sm btn-outline-light"
                     data-bs-toggle="tooltip"
                     data-bs-placement="bottom"
                     data-bs-custom-class="custom-tooltip"
                     data-bs-title="@Localization["ClearSearchHistory"]"
                     @onclick="ClearSearchHistory">
                    <i class="fa-solid fa-xmark"></i>
                </button>
                </div>
            </li>
        </ul>
    </div>
    <div class="d-flex align-items-center">
        <div id="questionHelp" class="form-text text-start flex-fill d-none d-sm-block">@Localization["InputHelpText"]</div>
        <div class="form-check form-switch ms-auto">
            <input class="form-check-input"
                   type="checkbox"
                   role="switch"
                   id="querySearchSwitcher"
                   disabled="@enteredQueryModeChange"
                   checked="@(queryMode is 0 ? false : true)"
                   value="@(queryMode)"
                   @onchange="OnChange_SwitchQueryModeAsync">
        </div>
        <span data-bs-toggle="tooltip"
              data-bs-placement="top"
              data-bs-custom-class="custom-tooltip"
              data-bs-title="@Localization["QuerySwitchHelpText"]">
            <i class="fa-regular fa-circle-question"></i>
        </span>
    </div>
</div>

<DisplayLyceumOfWisdom Answers="answers"
                       QuestionsWithAnswers="questionsWithAnswers"
                       LoadingAnswers="loadingAnswer"
                       SearchModeActive="enteredSearchMode" />

@code {
    private Dictionary<string, string[]> emptyDictionary = new();
    private IReadOnlyDictionary<string, string[]>? questionsWithAnswers;
    private IReadOnlyDictionary<string, string[]>? answers;
    private QueryMode queryMode;
    private Queue<string>? searchHistory;
    private ElementReference inputReference;
    private bool loadingAnswer = false;
    private bool enteredSearchMode = false;
    private bool enteredQueryModeChange = false;
    private bool isDataSupportedByLanguage = true;
    private string input = string.Empty;
    private string settingsModule = "./js/settings.js";
    private int searchHistoryCapacity = 10;

    protected override async Task OnInitializedAsync()
    {
        searchHistory = new(searchHistoryCapacity);
        var module = await ImportModuleReferenceAsync(settingsModule);
        if (module is not null)
        {
            string rawMode = await module.InvokeAsync<string>("getSearchQueryMode");

            if (!string.IsNullOrWhiteSpace(rawMode))
            {
                queryMode = (QueryMode)Convert.ToInt32(rawMode);
            }
        }

        answers = emptyDictionary;
        await InitializeDataAsync();

        await base.OnInitializedAsync();

        await inputReference.FocusAsync();
    }

    private async Task InitializeDataAsync()
    {
        string localizationFileUrl = $"data/{LocalizationLangauge["Locale"]}.json";
        string fallbackFileUrl = "data/en.json";
        Dictionary<string, string[]>? tempDict = emptyDictionary;

        try
        {
            HttpResponseMessage msg = await Http.GetAsync(localizationFileUrl);

            if (msg.StatusCode is System.Net.HttpStatusCode.NotFound)
            {
                tempDict = await Http.GetFromJsonAsync<Dictionary<string, string[]>>(fallbackFileUrl);
                isDataSupportedByLanguage = false;
                return;
            }

            tempDict = await Http.GetFromJsonAsync<Dictionary<string, string[]>>(localizationFileUrl);

            if (tempDict?.Any() is false)
            {
                tempDict = await Http.GetFromJsonAsync<Dictionary<string, string[]>>(fallbackFileUrl);
                isDataSupportedByLanguage = false;
                return;
            }

            isDataSupportedByLanguage = true;
        }
        catch (Exception)
        {
            tempDict = await Http.GetFromJsonAsync<Dictionary<string, string[]>>(fallbackFileUrl);
            isDataSupportedByLanguage = false;
        }
        finally
        {
            if (tempDict?.Any() is true)
            {
                questionsWithAnswers = tempDict;
            }
        }
    }

    private void OnInput_SaveInputData(ChangeEventArgs e)
    {
        input = $"{e?.Value}";
        enteredSearchMode = false;
    }

    private void ClearSearchHistory()
    {
        if (searchHistory is null)
        {
            return;
        }

        if (!searchHistory.Any())
        {
            return;
        }

        searchHistory.Clear();
    }

    private void ClearInput()
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return;
        }

        input = string.Empty;
        answers = emptyDictionary;
        enteredSearchMode = false;
    }

    private async Task OnChange_SwitchQueryModeAsync(ChangeEventArgs e)
    {
        enteredQueryModeChange = true;
        try
        {
            switch (e.Value)
            {
                case false:
                    queryMode = QueryMode.QuestionMode;
                    break;
                case true:
                    queryMode = QueryMode.AnswerMode;
                    break;
            }

            var module = await ImportModuleReferenceAsync(settingsModule);
            if (module is not null)
            {
                await module.InvokeVoidAsync("setSearchQueryMode", queryMode);
            }
        }
        finally
        {
            enteredQueryModeChange = false;
            StateHasChanged();
        }
    }

    private void OnKeyDown_HandleInput(KeyboardEventArgs e)
    {
        if (!e.Key.Equals("Escape"))
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(input))
        {
            return;
        }

        ClearInput();
    }

    private void OnKeyPress_HandleInput(KeyboardEventArgs e)
    {
        if (!e.Key.Equals("Enter"))
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(input))
        {
            return;
        }

        enteredSearchMode = true;
        loadingAnswer = true;
        _ = Task.Run(async () =>
        {
            await LookupAnswersAsync(input);
        });
    }

    private void OnChange_SearchByInput(ChangeEventArgs e)
    {
        enteredSearchMode = true;
        loadingAnswer = true;
        _ = Task.Run(async () =>
        {
            string searchInput = e.Value is null ? string.Empty : $"{e.Value}";
            await LookupAnswersAsync(searchInput);
        });
    }

    private void OnClick_SearchByHistory(string searchHistory)
    {
        enteredSearchMode = true;
        loadingAnswer = true;
        _ = Task.Run(async () =>
        {
            input = searchHistory;
            await LookupAnswersAsync(searchHistory);
        });
    }

    private async Task LookupAnswersAsync(string searchInput)
    {
        try
        {
            if (questionsWithAnswers is null)
            {
                answers = emptyDictionary;
                return;
            }

            if (string.IsNullOrEmpty(searchInput) || string.IsNullOrWhiteSpace(searchInput))
            {
                answers = emptyDictionary;
                return;
            }

            if (!searchHistory.Contains(searchInput))
            {
                if (searchHistory.Count >= searchHistoryCapacity)
                {
                    searchHistory.Dequeue();
                }

                searchHistory.Enqueue(searchInput);
            }

            if (queryMode is 0)
            {
                answers =
                    (from q in questionsWithAnswers
                     where q.Key.Contains(searchInput, StringComparison.OrdinalIgnoreCase)
                     select q).ToDictionary(q => q.Key, q => q.Value);

                return;
            }

            answers =
                    questionsWithAnswers
                    .Where(a => a.Value.Any(x => x.Contains(searchInput, StringComparison.OrdinalIgnoreCase)))
                    .Select(q => q)
                    .ToDictionary(q => q.Key, q => q.Value);
        }
        finally
        {
            await InvokeAsync(() =>
            {
                loadingAnswer = false;
                StateHasChanged();
            });

            await inputReference.FocusAsync();
        }
    }

    protected enum QueryMode
    {
        QuestionMode = 0,
        AnswerMode = 1
    }
}