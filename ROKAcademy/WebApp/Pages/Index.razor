@page "/"
@inject HttpClient Http
@inject IStringLocalizer<Index> Localization
@inject IStringLocalizer<LanguageSelector> LocalizationLangauge

<PageTitle>RoK Academy - @Localization["PageTitle"]</PageTitle>

<div class="mb-3">
    <div class="input-group">
        <div class="form-floating">
            <input id="questionInput"
                   class="form-control text-bg-light border-light"
                   type="text"
                   placeholder="@Localization["QuestionInputAriaLabel"]"
                   aria-label="@Localization["QuestionInputAriaLabel"]"
                   disabled="@loadingAnswer"
                   value="@input"
                   @onchange="@OnChange_SearchByInput"
                   @oninput="@SaveInputData">

            <label for="questionInput" class="text-dark">@Localization["InputPlaceholderText"]</label>
        </div>
        <button class="input-group-text text-bg-light text-dark @(string.IsNullOrWhiteSpace(input) ? "pe-none" : "pe-auto")"
                data-bs-toggle="tooltip"
                data-bs-placement="top"
                data-bs-custom-class="custom-tooltip"
                data-bs-title="@Localization["ClearSearchInputText"]"
                @onclick="ClearInput">
            <i class="fa-solid fa-xmark"></i>
        </button>

        <button id="searchHistoryDropdownmenu"
                class="btn @(!searchHistory.Any() ? "btn-outline-light" : "btn-light") dropdown-toggle"
                disabled="@(!searchHistory.Any())"
                type="button" data-bs-toggle="dropdown"
                aria-expanded="false">
            <span class="d-inline d-sm-none"><i class="fa-solid fa-clock-rotate-left"></i></span>
            <span class="d-none d-sm-inline">@Localization["SearchHistoryDropdownButtonText"]</span>
        </button>

        <ul class="dropdown-menu dropdown-menu-end dropdown-menu-dark" aria-labelledby="searchHistoryDropdownmenu">
            <li><h6 class="dropdown-header">@Localization["SearchHistoryDropdownHeaderText"]</h6></li>
            @if (searchHistory is not null)
            {
                @foreach (string search in searchHistory)
                {
                    <li><a class="dropdown-item" href="" @onclick="() => OnClick_SearchByHistory(search)">@search</a></li>
                }
            }
        </ul>
    </div>
    <div id="questionHelp" class="form-text text-start d-none d-sm-block">@Localization["InputHelpText"]</div>
</div>

<div class="table-responsive table-responsive-md my-5">
    @if (answers is null || questionsWithAnswers is null)
    {
        <LoadingIndicator />
    }
    else
    {
        @if (loadingAnswer)
        {
            <LoadingIndicator />
        }
        else
        {
            @if (answers.Any())
            {
                <table class="table table-lg table-dark table-hover table-striped align-middle">
                    <thead>
                        <tr>
                            <th scope="col" class="text-start d-none d-sm-block">@Localization["TableHeaderQuestionText"]</th>
                            <th scope="col" class="text-start text-sm-end">@Localization["TableHeaderAnswerText"]</th>
                        </tr>
                    </thead>
                    <tbody class="table-group-divider">
                        @foreach (var answer in answers)
                        {
                            <tr>
                                <td class="text-start d-none d-sm-block">@answer.Key</td>
                                <td class="text-start text-sm-end">@answer.Value</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                @if (enteredSearchMode)
                {
                    <p>@Localization["NoDataFoundText"]</p>
                }
            }
        }
    }
</div>

@code {
    private Dictionary<string, string> emptyDictionary = new();
    private IReadOnlyDictionary<string, string>? questionsWithAnswers;
    private IReadOnlyDictionary<string, string>? answers;
    private Stack<string> searchHistory = new(10);
    private bool loadingAnswer = false;
    private bool enteredSearchMode = false;
    private string input = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        answers = emptyDictionary;
        await InitializeDataAsync();

        await base.OnInitializedAsync();
    }

    private async Task InitializeDataAsync()
    {
        string localizationFileUrl = $"data/{LocalizationLangauge["Locale"]}.json";

        try
        {
            Dictionary<string, string>? tempDict = await Http.GetFromJsonAsync<Dictionary<string, string>>(localizationFileUrl);

            questionsWithAnswers = tempDict;
        }
        catch (Exception)
        {
            questionsWithAnswers = emptyDictionary;
        }
    }

    private void SaveInputData(ChangeEventArgs e)
    {
        input = $"{e.Value}";
        enteredSearchMode = false;
    }

    private void ClearInput()
    {
        input = string.Empty;
        answers = emptyDictionary;
        enteredSearchMode = false;
    }

    private void OnChange_SearchByInput(ChangeEventArgs e)
    {
        enteredSearchMode = true;
        loadingAnswer = true;
        _ = Task.Run(async () =>
        {
            string searchInput = e.Value is null ? string.Empty : $"{e.Value}";
            await LookupAnswersAsync(searchInput);
        });
    }

    private void OnClick_SearchByHistory(string searchHistory)
    {
        enteredSearchMode = true;
        loadingAnswer = true;
        _ = Task.Run(async () =>
        {
            input = searchHistory;
            await LookupAnswersAsync(searchHistory);
        });
    }

    private async Task LookupAnswersAsync(string searchInput)
    {
        try
        {
            if (questionsWithAnswers is null)
            {
                answers = emptyDictionary;
                return;
            }

            if (string.IsNullOrEmpty(searchInput) || string.IsNullOrWhiteSpace(searchInput))
            {
                answers = emptyDictionary;
                return;
            }

            if (!searchHistory.Contains(searchInput))
            {
                searchHistory.Push(searchInput);
            }

            answers =
                (from q in questionsWithAnswers
                 where q.Key.Contains(searchInput, StringComparison.OrdinalIgnoreCase)
                 select q).ToDictionary(q => q.Key, q => q.Value);
        }
        finally
        {
            await InvokeAsync(() =>
            {
                loadingAnswer = false;
                StateHasChanged();
            });
        }
    }
}

