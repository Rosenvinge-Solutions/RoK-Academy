@page "/"
@inject HttpClient Http
@inject IStringLocalizer<Index> Localization
@inject IStringLocalizer<LanguageSelector> LocalizationLangauge

<PageTitle>RoK Academy - @Localization["PageTitle"]</PageTitle>

<div class="mb-3">
    <div class="input-group">
        <div class="form-floating">
            <input id="questionInput"
                   class="form-control text-bg-light border-light"
                   type="text"
                   placeholder="@Localization["QuestionInputAriaLabel"]"
                   aria-label="@Localization["QuestionInputAriaLabel"]"
                   disabled="@loadingAnswer"
                   value="@input"
                   @onchange="@OnChange_SearchByInputAsync"
                   @oninput="@SaveInputData">

            <label for="questionInput" class="text-dark">@Localization["InputPlaceholderText"]</label>
        </div>
        <button class="input-group-text text-bg-light text-dark @(string.IsNullOrEmpty(input) ? "pe-none" : "pe-auto")"
                data-bs-toggle="tooltip"
                data-bs-placement="top"
                data-bs-custom-class="custom-tooltip"
                data-bs-title="@Localization["ClearSearchInputText"]"
                @onclick="ClearInput">
            <i class="fa-solid fa-xmark"></i>
        </button>

        <button id="searchHistoryDropdownmenu"
                class="btn @(searchHistory.Count is 0 ? "btn-outline-light" : "btn-light") dropdown-toggle"
                disabled="@(searchHistory.Count is 0)"
                type="button" data-bs-toggle="dropdown"
                aria-expanded="false">
            @Localization["SearchHistoryDropdownButtonText"]
        </button>

        <ul class="dropdown-menu dropdown-menu-end dropdown-menu-dark" aria-labelledby="searchHistoryDropdownmenu">
            <li><h6 class="dropdown-header">@Localization["SearchHistoryDropdownHeaderText"]</h6></li>
            @if (searchHistory is not null)
            {
                @foreach (string search in searchHistory)
                {
                    <li><a class="dropdown-item" href="" @onclick="() => OnClick_SearchByHistoryAsync(search)">@search</a></li>
                }
            }
        </ul>
    </div>
    <div id="questionHelp" class="form-text text-start">@Localization["InputHelpText"]</div>
</div>

<div class="table-responsive table-responsive-md my-5">
    @if (loadingAnswer)
    {
        <div class="spinner-border text-light" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {

        <table class="table table-lg table-dark table-hover table-striped align-middle">
            <thead>
                <tr>
                    @if (answers is not null)
                    {
                        if (answers.Count() is 0)
                        {
                            <th scope="col">@Localization["TableHeaderQuestionText"]</th>
                        }
                    }
                    <th scope="col">@Localization["TableHeaderAnswerText"]</th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
                @if (questionsWithAnswers is null)
                {
                    <tr>
                        <th>
                            @Localization["LoadingText"]
                        </th>
                        <th>
                            <div class="spinner-border text-light" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </th>
                    </tr>
                }
                else
                {
                    @if (answers is null)
                    {
                        <tr>
                            <th>@Localization["NoDataFoundText"]</th>
                        </tr>
                    }
                    else
                    {
                        @for (int i = 0; i < answers.Count(); i++)
                        {
                            <tr>
                                <td>@answers.ElementAt(i)</td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    }
</div>

@code {
    private IReadOnlyDictionary<string, string>? questionsWithAnswers;
    private IEnumerable<string>? answers = Enumerable.Empty<string>();
    private Stack<string> searchHistory = new(10);
    private CancellationTokenSource cancellationToken = new();
    private bool loadingAnswer = false;
    private string input = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await InitializeDataAsync();

        await base.OnInitializedAsync();
    }

    private async Task InitializeDataAsync()
    {
        string localizationFileUrl = $"data/{LocalizationLangauge["Locale"]}.json";

        try
        {
            Dictionary<string, string>? tempDict = await Http.GetFromJsonAsync<Dictionary<string, string>>(localizationFileUrl);

            questionsWithAnswers = tempDict;
        }
        catch (Exception)
        {
            questionsWithAnswers = new Dictionary<string, string>();
        }
    }

    private void SaveInputData(ChangeEventArgs e)
    {
        input = $"{e.Value}";
    }

    private void ClearInput()
    {
        input = string.Empty;
        answers = Enumerable.Empty<string>();
    }

    private async Task OnChange_SearchByInputAsync(ChangeEventArgs e)
    {
        loadingAnswer = true;
        _ = Task.Run(async () =>
        {
            string searchInput = e.Value is null ? string.Empty : $"{e.Value}";
            await LookupAnswersAsync(searchInput);
        }, cancellationToken.Token);

        await Task.CompletedTask;
    }

    private async Task OnClick_SearchByHistoryAsync(string searchHistory)
    {
        loadingAnswer = true;
        _ = Task.Run(async () =>
        {
            input = searchHistory;
            await LookupAnswersAsync(searchHistory);
        }, cancellationToken.Token);

        await Task.CompletedTask;
    }

    private async Task LookupAnswersAsync(string searchInput)
    {
        if (questionsWithAnswers is null)
        {
            answers = Enumerable.Empty<string>();
            return;
        }

        if (string.IsNullOrEmpty(searchInput) || string.IsNullOrWhiteSpace(searchInput))
        {
            answers = Enumerable.Empty<string>();
            return;
        }

        if (!searchHistory.Contains(searchInput))
        {
            searchHistory.Push(searchInput);
        }

        answers = questionsWithAnswers.Where(q => q.Key.Contains($"{searchInput}", StringComparison.OrdinalIgnoreCase)).Select(a => a.Value);

        await InvokeAsync(() =>
        {
            loadingAnswer = false;
            StateHasChanged();
        });
    }
}

