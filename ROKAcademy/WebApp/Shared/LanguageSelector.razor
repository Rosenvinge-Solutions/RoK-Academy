@inherits LayoutBase
@implements IDisposable
@inject NavigationManager NavManager
@inject IStringLocalizer<LanguageSelector> Localization

@if (_supportedLanguages is null)
{
    <div class="spinner-border spinner-border-sm" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <select id="language-selector" class="form-select form-select-sm" size="1" aria-label="@(Localization["AriaLabel"])" @bind="Culture">
        @foreach (var culture in _supportedLanguages)
        {
            <option disabled="@culture.IsDisabled"
                    value="@culture.Code"
                    title="@(culture.IsDisabled ? "Coming Soon" : "")">
                @if (_isMobileDeviceMode)
                {
                    @culture.Country
                }
                else
                {
                    @culture.DisplayName
                }
            </option>
        }
    </select>
}

@code {
    private event EventHandler? OnCultureChanged;

    private IEnumerable<LanguageCodes> _supportedLanguages = Enumerable.Empty<LanguageCodes>();
    private string cultureModule = "./js/culture.js";
    private bool _isMobileDeviceMode = false;

    public CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            if (CultureInfo.CurrentCulture.Equals(value)) return;

            _ = Task.Run(async () =>
            {
                var module = await ImportModuleReferenceAsync(cultureModule);

                await module.InvokeVoidAsync("setCulture", value.Name);

                OnCultureChanged?.Invoke(this, EventArgs.Empty);
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("setDotNetReferenceForLanguageSelector", DotNetObjectReference.Create(this));

        OnCultureChanged += RefreshPageOnCultureChanged;

        string[] enCulture = Localization["EnglishCulture"].Value.Split(";", StringSplitOptions.TrimEntries);
        string[] deCulture = Localization["GermanCulture"].Value.Split(";", StringSplitOptions.TrimEntries);
        string[] ruCulture = Localization["RussianCulture"].Value.Split(";", StringSplitOptions.TrimEntries);
        string[] frCulture = Localization["FrenchCulture"].Value.Split(";", StringSplitOptions.TrimEntries);
        string[] esCulture = Localization["SpanishCulture"].Value.Split(";", StringSplitOptions.TrimEntries);
        string[] ptCulture = Localization["PortugueseCulture"].Value.Split(";", StringSplitOptions.TrimEntries);

        _supportedLanguages = new List<LanguageCodes>
            {
                new (code: enCulture[0], displayName: enCulture[1], country: "🇺🇸"),
                new (code: deCulture[0], displayName: deCulture[1], country: "🇩🇪"),
                new (code: ruCulture[0], displayName: ruCulture[1], country: "🇷🇺"),
                new (code: frCulture[0], displayName: frCulture[1], country: "🇫🇷", true),
                new (code: esCulture[0], displayName: esCulture[1], country: "🇪🇸", true),
                new (code: ptCulture[0], displayName: ptCulture[1], country: "🇵🇹", true)
            };

        var module = await ImportModuleReferenceAsync(cultureModule);
        Culture = new CultureInfo(await module.InvokeAsync<string>("getCulture"));
    }

    private void RefreshPageOnCultureChanged(object? sender, EventArgs e)
    {
        NavManager.NavigateTo(NavManager.Uri, true);
    }

    public void Dispose()
    {
        OnCultureChanged -= RefreshPageOnCultureChanged;
    }

    [JSInvokable]
    public void InitializeMobileDeviceMode(bool isMobile)
    {
        _isMobileDeviceMode = isMobile;

        StateHasChanged();
    }
}
