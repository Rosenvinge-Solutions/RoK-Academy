@inherits LayoutBase
@implements IDisposable
@inject NavigationManager NavManager
@inject IStringLocalizer<LanguageSelector> Localization

@if (_supportedLanguages is null)
{
    <div class="spinner-border spinner-border-sm" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    @if (currentLanguage is not null)
    {
        <div class="dropup-center dropup">
            <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-display="static" aria-label="@(Localization["AriaLabel"])" aria-expanded="false">
                <span class="fi fi-@currentLanguage.Country me-1"></span>
                @if (_isMobileDeviceMode is false)
                {
                    @currentLanguage.DisplayName
                }

            </button>
            <ul class="dropdown-menu dropdown-menu-end dropdown-menu-dark">
                @foreach (var lang in _supportedLanguages)
                {
                    @if (lang.IsDisabled)
                    {
                        <li>
                            <span data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="custom-tooltip" data-bs-title="Coming Soon">
                                <a href="" class="dropdown-item disabled">
                                    <span class="fi fi-@lang.Country me-1"></span>

                                    @if (_isMobileDeviceMode is false)
                                    {
                                        @lang.DisplayName
                                    }
                                </a>
                            </span>
                        </li>
                    }
                    else
                    {
                        <li @onclick="() => ChangeLanguage(lang)">
                            <a href="" class="dropdown-item">
                                <span class="fi fi-@lang.Country me-1"></span>

                                @if (_isMobileDeviceMode is false)
                                {
                                    @lang.DisplayName
                                }
                            </a>
                        </li>
                    }
                }
            </ul>
        </div>
    }
}

@code {
    private event EventHandler? OnCultureChanged;

    private IEnumerable<LanguageCodes> _supportedLanguages = Enumerable.Empty<LanguageCodes>();
    private string cultureModule = "./js/culture.js";
    private bool _isMobileDeviceMode = false;
    private LanguageCodes? currentLanguage;

    public CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            if (CultureInfo.CurrentCulture.Equals(value)) return;

            _ = Task.Run(async () =>
            {
                var module = await ImportModuleReferenceAsync(cultureModule);

                await module.InvokeVoidAsync("setCulture", value.Name);

                OnCultureChanged?.Invoke(this, EventArgs.Empty);
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IJSObjectReference module = await ImportModuleReferenceAsync(cultureModule);
        await module.InvokeVoidAsync("setDotNetReferenceForLanguageSelector", DotNetObjectReference.Create(this));

        OnCultureChanged += RefreshPageOnCultureChanged;

        string[] enCulture = Localization["EnglishCulture"].Value.Split(";", StringSplitOptions.TrimEntries);
        string[] deCulture = Localization["GermanCulture"].Value.Split(";", StringSplitOptions.TrimEntries);
        string[] ruCulture = Localization["RussianCulture"].Value.Split(";", StringSplitOptions.TrimEntries);
        string[] frCulture = Localization["FrenchCulture"].Value.Split(";", StringSplitOptions.TrimEntries);
        string[] esCulture = Localization["SpanishCulture"].Value.Split(";", StringSplitOptions.TrimEntries);
        string[] ptCulture = Localization["PortugueseCulture"].Value.Split(";", StringSplitOptions.TrimEntries);

        _supportedLanguages = new List<LanguageCodes>
            {
                new (code: enCulture[0], displayName: enCulture[1], country: "us"),
                new (code: deCulture[0], displayName: deCulture[1], country: "de"),
                new (code: ruCulture[0], displayName: ruCulture[1], country: "ru"),
                new (code: frCulture[0], displayName: frCulture[1], country: "fr"),
                new (code: esCulture[0], displayName: esCulture[1], country: "es"),
                new (code: ptCulture[0], displayName: ptCulture[1], country: "pt")
            };

        Culture = new CultureInfo(await module.InvokeAsync<string>("getCulture"));

        currentLanguage = _supportedLanguages.Where(x => x.Code.Equals(Culture.Name)).First();
    }

    private void ChangeLanguage(LanguageCodes changedLanguage)
    {
        Culture = new CultureInfo(changedLanguage.Code);
    }

    private void RefreshPageOnCultureChanged(object? sender, EventArgs e)
    {
        NavManager.NavigateTo(NavManager.Uri, true);
    }

    public void Dispose()
    {
        OnCultureChanged -= RefreshPageOnCultureChanged;
    }

    [JSInvokable]
    public void InitializeMobileDeviceMode(bool isMobile)
    {
        _isMobileDeviceMode = isMobile;

        StateHasChanged();
    }
}
